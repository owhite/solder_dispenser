#include <i2c_t3.h>
#include <Stepper.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "icon_data.h"

#define OLED_RESET 4
#define SERIAL_SPEED   115200

#define M0       5
#define M1       4
#define M2       3
#define STEP     6
#define DIR      8
#define ENABLE   7
#define FAULT    9
#define BTN_PIN  2
#define FOOT_PIN 11

#define S_IDLE            1
#define S_START_PULSE     2
#define S_MOTOR_PULSE     3
#define S_START_CONT      4
#define S_MOTOR_PULSE     5
#define S_CONTINUOUS      6
#define S_STOP            7

elapsedMillis elapsedRunTime;

elapsedMillis elapsedBtn1Time;
uint16_t btn1Delay = 200;
uint8_t btn1State = false;
boolean btn1Pressed = false;

elapsedMillis elapsedBtn2Time;
uint32_t btn2Delay = 200;
uint8_t btn2State = false;
boolean btn2Pressed = false;
boolean btn2Released = false;

uint8_t count = 0;

uint8_t settingNum = 0;
uint8_t oldDisplayNum = 0;
uint8_t displayMax = 6;

String inputString = "";

uint16_t STEPS = 200;
uint16_t pos = 0;
uint8_t state = S_IDLE;

char *iconNames[] = {"FORWARD", "REVERSE", "prog 1", "prog 2", "prog 3"};
int16_t progTime[] = {0, 0, 10, 20, 40};
int16_t progSpeed[] = {80, 80, 80, 80, 80};

Adafruit_SSD1306 display(OLED_RESET);

void setup() {
  inputString.reserve(200);
  Serial.begin(SERIAL_SPEED);
  // Wire.begin(I2C_MASTER, 0x00, I2C_PINS_18_19, I2C_PULLUP_EXT, I2C_RATE_1200);
  // display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  
      
  pinMode(M0, OUTPUT);  
  pinMode(M1, OUTPUT);  
  pinMode(M2, OUTPUT);  
  pinMode(STEP, OUTPUT);  
  pinMode(DIR, OUTPUT);  
  pinMode(ENABLE, OUTPUT);  

  pinMode(FAULT, INPUT);  
  pinMode(BTN_PIN, INPUT);  
  pinMode(FOOT_PIN, INPUT);  

  digitalWrite(M0, HIGH);
  digitalWrite(M1, HIGH);
  digitalWrite(M2, HIGH);
  digitalWrite(ENABLE, HIGH);

  // display.clearDisplay();
  // display.setTextColor(WHITE);
  // updateDisplay();
}

void updateDisplay() {
  display.clearDisplay();
  display.drawBitmap(44, 0, icon_bmp[settingNum], ICON_WIDTH, ICON_HEIGHT, 1);
  display.setTextSize(1);

  display.setCursor(0,5); display.print(iconNames[settingNum]);

  display.setCursor(0,25); display.print("T:");
  display.setCursor(14,25); display.print(progTime[settingNum]);
  
  display.setCursor(0,45); display.print("S:");
  display.setCursor(14,45); display.print(progSpeed[settingNum]);
  
  display.display();
}

void doEachLoop() {
  checkUSBSerial();

  if (btn1Pressed && elapsedBtn1Time > btn1Delay) {
    if (digitalRead(BTN_PIN) == LOW) { // released
      settingNum++;
      if (settingNum == ICON_MAX) { settingNum = 0; }
    }
  }
  if (digitalRead(BTN_PIN) == HIGH && btn1Pressed == false) {
    elapsedBtn1Time = 0;
    btn1Pressed = true;
  }
  if (digitalRead(BTN_PIN) == LOW) {btn1Pressed = false; }


  if (btn2Pressed && elapsedBtn2Time > btn2Delay) {
    if (digitalRead(FOOT_PIN) == LOW) { // released
      if (settingNum != 0 && settingNum != 1) { state = S_START_PULSE; }
    }
    if (settingNum == 0 || settingNum == 1) { state = S_CONTINUOUS; }
  }
  if (digitalRead(FOOT_PIN) == HIGH && btn2Pressed == false) {
    elapsedBtn2Time = 0;
    btn2Pressed = true;
  }
  if (digitalRead(FOOT_PIN) == LOW) {btn2Pressed = false; }

  if (settingNum != oldDisplayNum) {
    // updateDisplay();
    oldDisplayNum = settingNum;
    btn1Pressed = false;
  }
}

int x = 0;
void loop() {
  doEachLoop();

  digitalWrite(STEP, HIGH);
  delay(200);
  digitalWrite(STEP, LOW);
  delay(200);
    

  switch (state) {
  case S_CONTINUOUS:
    // SET THE SPEED
    // SET DIRECTION
    // BUMP STEPPER
    // Serial.println("cont");

    digitalWrite(STEP, HIGH);
    delay(200);
    digitalWrite(STEP, LOW);
    delay(200);
    

    state = S_IDLE;
    break;

  case S_START_PULSE:
    // SET THE SPEED
    // SET THE COUNTER
    state = S_MOTOR_PULSE;
    count = 0;

    break;

  case S_MOTOR_PULSE:
    // BUMP THE COUNTER
    // CHANGE STATE WHEN COUNTER REACHES END
    state = S_IDLE;
    break;

  case S_STOP:
    Serial.println("done");
    state = S_IDLE;
    break;

  case S_IDLE:
    break;

  default:
    Serial.printf("Unknown state %d\n", state);
    break;
  }

}

void checkUSBSerial() { 
  while (Serial.available()) {
    char inChar = (char)Serial.read();
    inputString += inChar;
    if (inChar == '\n') {
      handle_cmd();
    }
  }
}

void handle_cmd() {
  inputString.trim(); // removes beginning and ending white spaces
  int idx = inputString.indexOf(' ');   
  String cmd = inputString.substring(0, idx); 
  String value = inputString.substring(idx + 1);

  if ((cmd.length() > 0)) {
    if (cmd.equals("probe_device")) {
      Serial.println("solder dispeser");
    }
    if (cmd.equals("run")) {
      Serial.println("running");
      state = S_MOTOR_PULSE;
    }
    if (cmd.equals("idle")) {
      Serial.println(cmd);
      state = S_IDLE;
    }
    inputString = "";
  }
}

